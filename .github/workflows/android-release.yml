name: Build Android APK

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Generate signing key
      run: |
        cd v2/app
        keytool -genkey -v \
          -keystore release-keystore.jks \
          -alias release-alias \
          -keyalg RSA \
          -keysize 2048 \
          -validity 10000 \
          -storepass password \
          -keypass password \
          -dname "CN=Android, OU=Android, O=Android, L=Unknown, ST=Unknown, C=US"

    - name: Build Signed Release APK
      run: |
        cd v2
        chmod +x ./gradlew
        SIGNING_STORE_PASSWORD=password \
        SIGNING_KEY_PASSWORD=password \
        SIGNING_KEY_ALIAS=release-alias \
        ./gradlew assembleRelease

    - name: Delete existing release
      uses: dev-drprasad/delete-tag-and-release@v1.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: ${{ github.ref_name }}
        delete_release: true

    - name: Rename APK
      run: |
        cd v2/app/build/outputs/apk/release
        cp app-release.apk DamesLaMaison-v${{ github.ref_name }}.apk

    - name: Upload APK to Release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ github.ref_name }}
        artifacts: "v2/app/build/outputs/apk/release/DamesLaMaison-v${{ github.ref_name }}.apk"
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish Release
      if: always()
      run: |
        API="https://api.github.com/repos/${{ github.repository }}"
        TAG="${{ github.ref_name }}"
        echo "Looking up release for tag $TAG"
        RELEASE_JSON=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$API/releases/tags/$TAG")
        RELEASE_ID=$(echo "$RELEASE_JSON" | jq -r .id)
        if [ -z "$RELEASE_ID" ] || [ "$RELEASE_ID" = "null" ]; then
          echo "No release found for tag $TAG. Exiting with success (nothing to publish)."
        else
          echo "Publishing release id=$RELEASE_ID"
          curl -s -X PATCH -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Content-Type: application/json" \
            -d '{"draft":false,"prerelease":false}' "$API/releases/$RELEASE_ID" | jq .
        fi
      shell: bash
        draft: false
        prerelease: false
