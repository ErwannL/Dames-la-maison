name: Build Android APK

on:
  push:
    tags:
      - 'v*'
  # allow manual runs from the Actions UI to debug or re-run for a tag
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Generate signing key
      run: |
        cd app
        keytool -genkey -v \
          -keystore release-keystore.jks \
          -alias release-alias \
          -keyalg RSA \
          -keysize 2048 \
          -validity 10000 \
          -storepass password \
          -keypass password \
          -dname "CN=Android, OU=Android, O=Android, L=Unknown, ST=Unknown, C=US"

    - name: Build Signed Release APK
      run: |
        chmod +x ./gradlew
        SIGNING_STORE_PASSWORD=password \
        SIGNING_KEY_PASSWORD=password \
        SIGNING_KEY_ALIAS=release-alias \
        ./gradlew assembleRelease

    - name: Delete existing release
      uses: dev-drprasad/delete-tag-and-release@v1.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: ${{ github.ref_name }}
        delete_release: true

    - name: Rename APK
      run: |
        cd app/build/outputs/apk/release
        cp app-release.apk DamesLaMaison-${{ github.ref_name }}.apk

    - name: Upload APK to Release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ github.ref_name }}
        artifacts: "app/build/outputs/apk/release/DamesLaMaison-${{ github.ref_name }}.apk"
        token: ${{ secrets.GITHUB_TOKEN }}
        draft: false
        prerelease: false

    - name: Publish Release
      if: always()
      run: |
        set -euo pipefail
        API="https://api.github.com/repos/${{ github.repository }}"
        TAG="${{ github.ref_name }}"
        TOKEN="${{ secrets.GITHUB_TOKEN }}"
        APK_PATH="app/build/outputs/apk/release/DamesLaMaison-${{ github.ref_name }}.apk"

        echo "Ensuring release for tag $TAG is published (will retry)..."

        # Retry loop: try to locate the release by tag and publish it if it's a draft
        RETRIES=5
        SLEEP=2
        for i in $(seq 1 $RETRIES); do
          echo "Attempt $i: Looking up release for tag $TAG"
          RELEASE_JSON=$(curl -s -H "Authorization: token $TOKEN" "$API/releases/tags/$TAG")
          RELEASE_ID=$(echo "$RELEASE_JSON" | jq -r .id)
          if [ -n "$RELEASE_ID" ] && [ "$RELEASE_ID" != "null" ]; then
            echo "Found release id=$RELEASE_ID"
            DRAFT=$(echo "$RELEASE_JSON" | jq -r .draft)
            if [ "$DRAFT" = "true" ]; then
              echo "Publishing release id=$RELEASE_ID"
              curl -s -X PATCH -H "Authorization: token $TOKEN" -H "Content-Type: application/json" \
                -d '{"draft":false,"prerelease":false}' "$API/releases/$RELEASE_ID" | jq .
            else
              echo "Release is already published"
            fi
            exit 0
          fi
          echo "Release not found yet, sleeping $SLEEP s and will retry..."
          sleep $SLEEP
          SLEEP=$((SLEEP * 2))
        done

        echo "Release not found after $RETRIES attempts â€” creating a new published release and uploading the APK (if present)."

        # Create a non-draft release
        CREATE_JSON=$(curl -s -X POST -H "Authorization: token $TOKEN" -H "Content-Type: application/json" \
          -d "{\"tag_name\":\"$TAG\",\"name\":\"$TAG\",\"body\":\"Release $TAG\",\"draft\":false,\"prerelease\":false}" \
          "$API/releases")
        echo "$CREATE_JSON" | jq .
        NEW_ID=$(echo "$CREATE_JSON" | jq -r .id)
        UPLOAD_URL=$(echo "$CREATE_JSON" | jq -r .upload_url)
        if [ -z "$NEW_ID" ] || [ "$NEW_ID" = "null" ]; then
          echo "Failed to create release. Exiting (nothing more to do)."
          exit 0
        fi

        # Upload APK asset if it exists
        if [ -f "$APK_PATH" ]; then
          ASSET_NAME=$(basename "$APK_PATH")
          # upload_url contains a template like: https://uploads.github.com/repos/:owner/:repo/releases/:id/assets{?name,label}
          UPLOAD_URL_CLEAN="${UPLOAD_URL%\{*}"
          echo "Uploading asset $ASSET_NAME to release $NEW_ID"
          curl -s -H "Authorization: token $TOKEN" -H "Content-Type: application/octet-stream" \
            --data-binary @"$APK_PATH" "$UPLOAD_URL_CLEAN?name=$ASSET_NAME" | jq .
        else
          echo "APK not found at $APK_PATH; skipping asset upload."
        fi
      shell: bash
